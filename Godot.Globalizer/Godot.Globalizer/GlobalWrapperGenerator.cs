using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Godot.Globalizer;


[Generator]
public sealed class GlobalWrapperGenerator : IIncrementalGenerator
{
    private const string AttributeName = "GlobalizerWrap";
    private const string AttributeFullName = "Godot.Globalizer.Attributes.GlobalizerWrapAttribute";
    
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var candidates = context.SyntaxProvider.CreateSyntaxProvider(
            static (n, _) => n is ClassDeclarationSyntax { AttributeLists.Count: > 0 },
            static (ctx, _) =>
            {
                var cds = (ClassDeclarationSyntax)ctx.Node;
                return cds.AttributeLists.Any(l => l.Attributes.Any(a => a.Name.ToString()
                    .Contains(AttributeName)))
                    ? cds
                    : null;
            }).Where(static c => c is not null);

        var combo = context.CompilationProvider.Combine(candidates.Collect());

        context.RegisterSourceOutput(combo,
            static (spc,
                pair) =>
            {
                var (compilation, list) = pair;
                if (list.Length == 0)
                    return;

                var attrSymbol = compilation.GetTypeByMetadataName(AttributeFullName);
                var nodeSymbol = compilation.GetTypeByMetadataName("Godot.Node");
                var globalClassAttr = compilation.GetTypeByMetadataName("Godot.GlobalClassAttribute");

                foreach (var cds in list)
                {
                    spc.CancellationToken.ThrowIfCancellationRequested();
                    Generate(spc,
                        compilation,
                        cds!,
                        attrSymbol,
                        nodeSymbol,
                        globalClassAttr);
                }
            });
    }

    private static void Generate(SourceProductionContext ctx, Compilation compilation, ClassDeclarationSyntax cds,
        INamedTypeSymbol? attrSymbol, INamedTypeSymbol? nodeSymbol, INamedTypeSymbol? globalClassAttr)
    {
        if (attrSymbol is null) return;
        var model = compilation.GetSemanticModel(cds.SyntaxTree);
        if (model.GetDeclaredSymbol(cds) is not INamedTypeSymbol sym) return;
        if (sym.IsGenericType) return;

        var data = sym.GetAttributes().FirstOrDefault(a => SymbolEqualityComparer.Default.Equals(a.AttributeClass, attrSymbol));
        if (data is null) return;

        if (nodeSymbol is not null && !Derives(sym, nodeSymbol)) return;

        string? custom = null;
        if (data.ConstructorArguments.Length == 1 && data.ConstructorArguments[0].Value is string s && !string.IsNullOrWhiteSpace(s))
            custom = s.Trim();

        var wrapperName = custom ?? sym.Name + "Global";
        var ns = sym.ContainingNamespace.IsGlobalNamespace ? null : sym.ContainingNamespace.ToDisplayString();

        if (sym.ContainingNamespace.GetTypeMembers(wrapperName).Any()) return;

        var baseType = sym.ToDisplayString(SymbolDisplayFormat.MinimallyQualifiedFormat);
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("using Godot;");
        if (ns is not null) sb.Append("namespace ").Append(ns).AppendLine(";").AppendLine();
        if (globalClassAttr is not null) sb.AppendLine("[GlobalClass]");
        sb.Append("public partial class ").Append(wrapperName).Append(" : ").Append(baseType).AppendLine();
        sb.AppendLine("{");
        sb.Append("    public static ").Append(wrapperName).Append(" Create() => new ").Append(wrapperName).Append("();");
        sb.AppendLine();
        sb.AppendLine("}");
        ctx.AddSource(wrapperName + ".g.cs", sb.ToString());
    }

    private static bool Derives(INamedTypeSymbol t, INamedTypeSymbol baseType)
    {
        for (var cur = t.BaseType; cur is not null; cur = cur.BaseType)
            if (SymbolEqualityComparer.Default.Equals(cur, baseType)) return true;
        return false;
    }
}